import * as dotenv from 'dotenv';
dotenv.config();
import express from 'express';
import morgan from 'morgan';
import cors from 'cors';
import { minify } from 'html-minifier';
import fs, { promises as fsAsync } from 'fs';
import path from 'path';

async function build() {
    if(!fs.existsSync('build')) await fsAsync.mkdir('build');

    const buildOpts = {
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true
    };
    
    const baseFile = await fsAsync.readFile('src/app.html', 'utf8');
    const newFile = minify(baseFile, buildOpts);
    await fsAsync.writeFile('build/index.html', newFile);
}

//build();

const app = express();
const port = process.env.PORT || 3000;

//app.use('/', express.static('build'));
// app.use('/memes', express.static(process.env.MEMES_FOLDER));
app.use(cors());
app.use(morgan(process.env.LOG_TYPE));

// app.get('/api/v1/random', async (req, res) => {
//     try {
//         const memes = await fsAsync.readdir(process.env.MEMES_FOLDER);
//         const meme = memes[Math.floor(Math.random()*memes.length)];

//         return res.status(200).json({success: true, meme});
//     } catch(e) {
//         console.error(e);
//         return res.status(500).json({success: false});
//     }
// });

// app.get('/api/v1/all', (req, res) => {
//     return res.status(501).json({success: false});
// });

app.get('/', async (req, res, next) => {
    const memes = await fsAsync.readdir(process.env.MEMES_FOLDER);
    const meme = memes[Math.floor(Math.random()*memes.length)];

    res.sendFile(path.join(process.env.MEMES_FOLDER, meme), (err) => {
        if(err) next(err);
    });
});

app.listen(port, () => {
    console.log(`MemeRNG running on port ${port}`);
});